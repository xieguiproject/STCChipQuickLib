C51 COMPILER V9.54   BSP_EPPROM                                                            12/23/2019 23:52:23 PAGE 1   


C51 COMPILER V9.54, COMPILATION OF MODULE BSP_EPPROM
OBJECT MODULE PLACED IN .\Objects\bsp_Epprom.obj
COMPILER INVOKED BY: d:\Keil_v5\C51\BIN\C51.EXE Src\bsp_Epprom.c LARGE OPTIMIZE(9,SPEED) BROWSE INCDIR(.\Libraries\STC15
                    -_StdPeriph_Driver\inc;.\Libraries\STC15_StdPeriph_Driver\src;.\Libraries\CMSIS) DEBUG OBJECTEXTEND PRINT(.\Listings\bsp_
                    -Epprom.lst) TABS(2) PREPRINT(.\Listings\bsp_Epprom.i) OBJECT(.\Objects\bsp_Epprom.obj)

line level    source

   1          #include "bsp_Epprom.h"
   2          
   3          
   4          
   5          /*----------------------------
   6          关闭IAP
   7          ----------------------------*/
   8          void IapIdle()
   9          {
  10   1          IAP_CONTR = 0;                  //关闭IAP功能
  11   1          IAP_CMD = 0;                    //清除命令寄存器
  12   1          IAP_TRIG = 0;                   //清除触发寄存器
  13   1          IAP_ADDRH = 0x80;               //将地址设置到非IAP区域
  14   1          IAP_ADDRL = 0;
  15   1      }
  16          
  17          
  18          /*----------------------------
  19          从ISP/IAP/EEPROM区域读取一字节
  20          ----------------------------*/
  21          BYTE IapReadByte(WORD addr)
  22          {
  23   1          BYTE dat;                       //数据缓冲区
  24   1      
  25   1          IAP_CONTR = ENABLE_IAP;         //使能IAP
  26   1          IAP_CMD = CMD_READ;             //设置IAP命令
  27   1          IAP_ADDRL = addr;               //设置IAP低地址
  28   1          IAP_ADDRH = addr >> 8;          //设置IAP高地址
  29   1          IAP_TRIG = 0x5a;                //写触发命令(0x5a)
  30   1          IAP_TRIG = 0xa5;                //写触发命令(0xa5)
  31   1          _nop_();                        //等待ISP/IAP/EEPROM操作完成
  32   1          dat = IAP_DATA;                 //读ISP/IAP/EEPROM数据
  33   1          IapIdle();                      //关闭IAP功能
  34   1      
  35   1          return dat;                     //返回
  36   1      }
  37          
  38          /*----------------------------
  39          写一字节数据到ISP/IAP/EEPROM区域
  40          ----------------------------*/
  41          void IapProgramByte(WORD addr, BYTE dat)
  42          {
  43   1          IAP_CONTR = ENABLE_IAP;         //使能IAP
  44   1          IAP_CMD = CMD_PROGRAM;          //设置IAP命令
  45   1          IAP_ADDRL = addr;               //设置IAP低地址
  46   1          IAP_ADDRH = addr >> 8;          //设置IAP高地址
  47   1          IAP_DATA = dat;                 //写ISP/IAP/EEPROM数据
  48   1          IAP_TRIG = 0x5a;                //写触发命令(0x5a)
  49   1          IAP_TRIG = 0xa5;                //写触发命令(0xa5)
  50   1          _nop_();                        //等待ISP/IAP/EEPROM操作完成
  51   1          IapIdle();
  52   1      }
  53          /*****************************************************************************
C51 COMPILER V9.54   BSP_EPPROM                                                            12/23/2019 23:52:23 PAGE 2   

  54           * 函 数 名  : IapWrite
  55           * 负 责 人  : xiegui
  56           * 创建日期  : 2019年1月13日
  57           * 函数功能  : 写入批量数据
  58           * 输入参数  : WORD addr       写地址
  59                         BYTE *buf       写
  60                         uint16_t uiLen  长度
  61           * 输出参数  : 无
  62           * 返 回 值  : 
  63           * 调用关系  : 
  64           * 其    它  : 
  65          
  66          *****************************************************************************/
  67          void IapWrite(WORD addr,BYTE *buf,uint16_t uiLen)
  68          {
  69   1        uint16_t uiLoop = 0;
  70   1        while(uiLoop < uiLen)
  71   1        {
  72   2          IapProgramByte(addr + uiLoop,buf[uiLoop]);
  73   2          uiLoop++;
  74   2        }
  75   1        IapIdle();
  76   1      }
  77          void IapRead(WORD addr,BYTE *buf,uint16_t uiLen)
  78          {
  79   1        uint16_t uiLoop = 0;
  80   1        while(uiLoop < uiLen)
  81   1        {
  82   2          buf[uiLoop] =  IapReadByte(addr + uiLoop);
  83   2          uiLoop++;
  84   2        }
  85   1        IapIdle();
  86   1      }
  87          
  88          /*----------------------------
  89          扇区擦除
  90          ----------------------------*/
  91          void IapEraseSector(WORD addr)
  92          {
  93   1          IAP_CONTR = ENABLE_IAP;         //使能IAP
  94   1          IAP_CMD = CMD_ERASE;            //设置IAP命令
  95   1          IAP_ADDRL = addr;               //设置IAP低地址
  96   1          IAP_ADDRH = addr >> 8;          //设置IAP高地址
  97   1          IAP_TRIG = 0x5a;                //写触发命令(0x5a)
  98   1          IAP_TRIG = 0xa5;                //写触发命令(0xa5)
  99   1          _nop_();                        //等待ISP/IAP/EEPROM操作完成
 100   1          IapIdle();
 101   1      }
 102          void EppromTest()
 103          {
 104   1        uint16_t uiLoop = 0;
 105   1        //printf("erase ok\n");
 106   1        IapEraseSector(EPPROM_PARM_BASE_ADDR);
 107   1        for(uiLoop = 0;uiLoop < 512;uiLoop++)
 108   1        {
 109   2          if(IapReadByte(EPPROM_PARM_BASE_ADDR + uiLoop) != 0xff)
 110   2          {
 111   3            //printf("erase error\n");
 112   3          }
 113   2        }
 114   1        //printf("erase ok\n");
 115   1      }
C51 COMPILER V9.54   BSP_EPPROM                                                            12/23/2019 23:52:23 PAGE 3   



MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =    299    ----
   CONSTANT SIZE    =   ----    ----
   XDATA SIZE       =   ----      18
   PDATA SIZE       =   ----    ----
   DATA SIZE        =   ----    ----
   IDATA SIZE       =   ----    ----
   BIT SIZE         =   ----    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
