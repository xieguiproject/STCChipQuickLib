C51 COMPILER V9.54   BSPPWM                                                                04/12/2019 16:33:33 PAGE 1   


C51 COMPILER V9.54, COMPILATION OF MODULE BSPPWM
OBJECT MODULE PLACED IN .\Objects\bspPwm.obj
COMPILER INVOKED BY: d:\Keil_v5\C51\BIN\C51.EXE Src\bspPwm.c LARGE OPTIMIZE(8,SPEED) BROWSE INCDIR(.\Libraries\STC15_Std
                    -Periph_Driver\inc;.\Libraries\STC15_StdPeriph_Driver\src;.\Libraries\CMSIS) DEBUG OBJECTEXTEND PRINT(.\Listings\bspPwm.l
                    -st) TABS(2) OBJECT(.\Objects\bspPwm.obj)

line level    source

   1          #include "bspPwm.h"
*** WARNING C323 IN LINE 12 OF Src\bspEspAtWifi.h: newline expected, extra characters found
*** WARNING C323 IN LINE 64 OF Src\bspEspAtWifi.h: newline expected, extra characters found
*** WARNING C323 IN LINE 25 OF Src\bspUsart.h: newline expected, extra characters found
   2          
   3          unsigned char SystemStatus = 0;
   4          unsigned char SystemRunMoto = 1;
   5          unsigned int OnTime = 100;
   6          unsigned int OffTime = 10;
   7          uint8_t dutyRates = 0;
   8          
   9          PWM_InitTypeDef mdPWM_InitTypeDefs;
  10          
  11          void Delay1ms()   //@11.0592MHz
  12          {
  13   1        unsigned char i, j;
  14   1      
  15   1        _nop_();
  16   1        _nop_();
  17   1        _nop_();
  18   1        i = 11;
  19   1        j = 190;
  20   1        do
  21   1        {
  22   2          while (--j);
  23   2        } while (--i);
  24   1      }
  25          void DelayMs(unsigned int time)
  26          {
  27   1        while(time--)
  28   1        {
  29   2          Delay1ms();
  30   2        }
  31   1      }
  32          /*****************************************************************************
  33           * º¯ Êý Ãû  : bspPwmInit
  34           * ¸º Ôð ÈË  : xiegui
  35           * ´´½¨ÈÕÆÚ  : 2018Äê11ÔÂ16ÈÕ
  36           * º¯Êý¹¦ÄÜ  : pwmÄ£¿é³õÊ¼»¯
  37           * ÊäÈë²ÎÊý  : ÎÞ
  38           * Êä³ö²ÎÊý  : ÎÞ
  39           * ·µ »Ø Öµ  : 
  40           * µ÷ÓÃ¹ØÏµ  : 
  41           * Æä    Ëü  : 
  42          
  43          *****************************************************************************/
  44          void bspPwmGpioDefInit()
  45          {
  46   1      #if 0
                uint8_t datas = 0;
                GPIO_InitTypeDef GPIO_InitTypeDefs;
                memset(&GPIO_InitTypeDefs,0,sizeof(GPIO_InitTypeDef));
              
C51 COMPILER V9.54   BSPPWM                                                                04/12/2019 16:33:33 PAGE 2   

                
                GPIO_InitTypeDefs.GPIO_Pin = GPIO_Pin_7;
                GPIO_InitTypeDefs.GPIO_Mode = GPIO_Mode_Standard_IO;
                
                GPIO_Init(GPIO_P2,&GPIO_InitTypeDefs);
                PWM2 = 0;
                
                /*P2.7 ÉèÖÃÎªÍÆÍêÊä³öÄ£Ê½*/
                GPIO_InitTypeDefs.GPIO_Pin = GPIO_Pin_7;
                GPIO_InitTypeDefs.GPIO_Mode = GPIO_Mode_Standard_IO;
                
                GPIO_Init(GPIO_P3,&GPIO_InitTypeDefs);
                /*P3.7ÉèÖÃÎªÍËÍìÊä³ö£¬ÆäÓàÎªÆÕÍ¨Ä£Ê½*/
                /*PWM1ºÍPWM2ÊÇ²»ÄÜÍ¬Ê±Êä³öPWMµÄ*/
                PWM1 = 0;
              #endif
  67   1      }
  68          /*****************************************************************************
  69           * º¯ Êý Ãû  : bspPwmPinSet
  70           * ¸º Ôð ÈË  : xiegui
  71           * ´´½¨ÈÕÆÚ  : 2019Äê1ÔÂ3ÈÕ
  72           * º¯Êý¹¦ÄÜ  : ÉèÖÃPWMÊä³öÓ²¼þ¹¦ÄÜ
  73           * ÊäÈë²ÎÊý  : ÎÞ
  74           * Êä³ö²ÎÊý  : ÎÞ
  75           * ·µ »Ø Öµ  : 
  76           * µ÷ÓÃ¹ØÏµ  : 
  77           * Æä    Ëü  : 
  78          
  79          *****************************************************************************/
  80          void bspPwmPinSet(uint8_t uiPwmNum)
  81          {
  82   1        #if 0
                GPIO_InitTypeDef GPIO_InitTypeDefs;
                memset(&GPIO_InitTypeDefs,0,sizeof(GPIO_InitTypeDef));
                
                switch(uiPwmNum)
                {
                  case 1:
                    GPIO_InitTypeDefs.GPIO_Pin = GPIO_Pin_7;
                    GPIO_InitTypeDefs.GPIO_Mode = GPIO_Mode_Out_PP;
                    GPIO_Init(GPIO_P2,&GPIO_InitTypeDefs);
                    /*ÉèÖÃPWM1ÎªPWMÄ£Ê½,pwm2ÎªÆÕÍ¨IO*/
                    GPIO_InitTypeDefs.GPIO_Pin = GPIO_Pin_7;
                    GPIO_InitTypeDefs.GPIO_Mode = GPIO_Mode_Standard_IO;
                    
                    GPIO_Init(GPIO_P3,&GPIO_InitTypeDefs);
                    PWM2 = 0;
                    break;
                  case 2:
                    GPIO_InitTypeDefs.GPIO_Pin = GPIO_Pin_7;
                    GPIO_InitTypeDefs.GPIO_Mode = GPIO_Mode_Standard_IO;
                    GPIO_Init(GPIO_P2,&GPIO_InitTypeDefs);
                    /*ÉèÖÃPWM1ÎªPWMÄ£Ê½,pwm2ÎªÆÕÍ¨IO*/
                    GPIO_InitTypeDefs.GPIO_Pin = GPIO_Pin_7;
                    GPIO_InitTypeDefs.GPIO_Mode = GPIO_Mode_Out_PP;
                    
                    GPIO_Init(GPIO_P3,&GPIO_InitTypeDefs);
                    PWM1 = 0;
                    break;
                  default:
                    GPIO_InitTypeDefs.GPIO_Pin = GPIO_Pin_7;
                    GPIO_InitTypeDefs.GPIO_Mode = GPIO_Mode_Standard_IO;
C51 COMPILER V9.54   BSPPWM                                                                04/12/2019 16:33:33 PAGE 3   

                    GPIO_Init(GPIO_P2,&GPIO_InitTypeDefs);
                    /*ÉèÖÃPWM1ÎªPWMÄ£Ê½,pwm2ÎªÆÕÍ¨IO*/
                    GPIO_InitTypeDefs.GPIO_Pin = GPIO_Pin_7;
                    GPIO_InitTypeDefs.GPIO_Mode = GPIO_Mode_Standard_IO;
                    PWM1 = 0;
                    PWM2 = 0;
                    break;
                }
                #endif
 122   1      }
*** WARNING C280 IN LINE 80 OF Src\bspPwm.c: 'uiPwmNum': unreferenced local variable
 123          #define CYCLE   0x550L     //¶¨ÒåPWMÖÜÆÚ(×î´óÖµÎª32767)
 124          #define DUTY    2L         //¶¨ÒåÕ¼¿Õ±ÈÎª10%
 125          
 126          void bspPwmConfigLockCmd(FunctionalState state)
 127          {
 128   1        if(state == ENABLE)
 129   1        {
 130   2          P_SW2 |= 0x80;                  //Ê¹ÄÜ·ÃÎÊXSFR
 131   2        }
 132   1        else
 133   1        {
 134   2          P_SW2 &= ~0x80;
 135   2        }
 136   1      }
 137          void bspSetPwmDutyRate(uint8_t uiDutyRate)
 138          {
 139   1        bspPwmConfigLockCmd(ENABLE);                  //Ê¹ÄÜ·ÃÎÊXSFR
 140   1      
 141   1        mdPWM_InitTypeDefs.fDutyRate = uiDutyRate;
 142   1        PWM2T2 = (mdPWM_InitTypeDefs.uiCycle * mdPWM_InitTypeDefs.fDutyRate) / 100;
 143   1      
 144   1        bspPwmConfigLockCmd(DISABLE);
 145   1      }
 146          void bspPwmConfig(uint8_t uiPwmNum,PWM_InitTypeDef *PWM_InitTypeDefs)
 147          {
 148   1        uint8_t uiReg = 0;
 149   1        
 150   1        bspPwmConfigLockCmd(ENABLE);                  //Ê¹ÄÜ·ÃÎÊXSFR
 151   1        
 152   1        PWMCFG = 0x00;                  //ÅäÖÃPWMµÄÊä³ö³õÊ¼µçÆ½ÎªµÍµçÆ½
 153   1        
 154   1        PWMCKS = 0x00;                  //Ñ¡ÔñPWMµÄÊ±ÖÓÎªFosc/(0+1)
 155   1        //Ñ¡ÔñÊ±ÖÓ
 156   1        PWMC = PWM_InitTypeDefs->uiCycle;                   //ÉèÖÃPWMÖÜÆÚ
 157   1        
 158   1        PWM2T1 = 0x0000;                //ÉèÖÃPWM2µÚ1´Î·´×ªµÄPWM¼ÆÊý
 159   1        
 160   1        PWM2T2 = (uint16_t)((PWM_InitTypeDefs->uiCycle * PWM_InitTypeDefs->fDutyRate) / 100);    //ÉèÖÃPWM2µÚ2´Î·
             -´×ªµÄPWM¼ÆÊý
 161   1                                          //Õ¼¿Õ±ÈÎª(PWM2T2-PWM2T1)/PWMC
 162   1          
 163   1          if(PWM_InitTypeDefs->OutPinMode == PWM_Out_Pin_Mode0)
 164   1          {
 165   2          PWM2CR = 0x00;                  //Ñ¡ÔñPWM2Êä³öµ½P3.7,²»Ê¹ÄÜPWM2ÖÐ¶Ï
 166   2        }
 167   1        else
 168   1        {
 169   2          PWM2CR = 0x08;                  //Ñ¡ÔñPWM2Êä³öµ½P2.7,²»Ê¹ÄÜPWM2ÖÐ¶Ï
 170   2        }
 171   1          
 172   1          bspPwmConfigLockCmd(DISABLE);
C51 COMPILER V9.54   BSPPWM                                                                04/12/2019 16:33:33 PAGE 4   

 173   1      }
*** WARNING C280 IN LINE 146 OF Src\bspPwm.c: 'uiPwmNum': unreferenced local variable
 174          /*****************************************************************************
 175           * º¯ Êý Ãû  : bspPwmInit
 176           * ¸º Ôð ÈË  : xiegui
 177           * ´´½¨ÈÕÆÚ  : 2019Äê1ÔÂ3ÈÕ
 178           * º¯Êý¹¦ÄÜ  : PWM³õÊ¼»¯
 179           * ÊäÈë²ÎÊý  : ÎÞ
 180           * Êä³ö²ÎÊý  : ÎÞ
 181           * ·µ »Ø Öµ  : 
 182           * µ÷ÓÃ¹ØÏµ  : 
 183           * Æä    Ëü  : 
 184          
 185          *****************************************************************************/
 186          void bspPwmInit(uint8_t uiPwmNum,uint8_t uiPwmClk,uint8_t fDutyRate,uint16_t uiCycle)
 187          {
 188   1        
 189   1      
 190   1        mdPWM_InitTypeDefs.PwmClk = uiPwmClk;
 191   1        mdPWM_InitTypeDefs.fDutyRate = fDutyRate;
 192   1        mdPWM_InitTypeDefs.uiCycle = uiCycle;
 193   1        switch(uiPwmNum)
 194   1        {
 195   2          case 1:
 196   2            mdPWM_InitTypeDefs.OutPinMode = PWM_Out_Pin_Mode0;//pwm1 P3.7 ÔÚµÚÒ»×é
 197   2            break;
 198   2          case 2:
 199   2            mdPWM_InitTypeDefs.OutPinMode = PWM_Out_Pin_Mode1;//pwm2 P2.7 ÔÚµÚ2×é
 200   2            break;
 201   2        }
 202   1        
 203   1        bspPwmConfig(uiPwmNum,&mdPWM_InitTypeDefs);
 204   1        /*ÅäÖÃÊ±ÖÓºÍÄ£Ê½µÈÐÅÏ¢*/
 205   1        bspPwmCmd(ENABLE);
 206   1        /*Ê¹ÄÜPWMÊä³ö*/
 207   1      }
 208          /*****************************************************************************
 209           * º¯ Êý Ãû  : bspPwmCmd
 210           * ¸º Ôð ÈË  : xiegui
 211           * ´´½¨ÈÕÆÚ  : 2019Äê1ÔÂ3ÈÕ
 212           * º¯Êý¹¦ÄÜ  : Ê¹ÄÜPWMÄ£¿é²¢¿ªÊ¼Êä³öPWMÐÅºÅ
 213           * ÊäÈë²ÎÊý  : ÎÞ
 214           * Êä³ö²ÎÊý  : ÎÞ
 215           * ·µ »Ø Öµ  : 
 216           * µ÷ÓÃ¹ØÏµ  : 
 217           * Æä    Ëü  : 
 218          
 219          *****************************************************************************/
 220          void bspPwmCmd(FunctionalState state)
 221          {
 222   1      #if 1
 223   1        if(state == ENABLE)
 224   1        {
 225   2          PWMCR = 0x01;                   //Ê¹ÄÜPWMÐÅºÅÊä³ö
 226   2            PWMCR |= 0x80;                  //Ê¹ÄÜPWMÄ£¿é
 227   2        }
 228   1        else
 229   1        {
 230   2          PWMCR = 0x00;                   //Ê¹ÄÜPWMÐÅºÅÊä³ö
 231   2        }
 232   1      #endif
 233   1      }
C51 COMPILER V9.54   BSPPWM                                                                04/12/2019 16:33:33 PAGE 5   

 234          void CheckCmd()
 235          {
 236   1        unsigned int uiLoop = 0;
 237   1        uint8_t uiDat = 0;
 238   1        char *Pointe = NULL;
 239   1        Pointe = strstr(mdUsarts.Usart1.UsartBuf,"SETDUTYRATE:");
 240   1        Delay1ms();
 241   1        
 242   1        if(NULL != Pointe)
 243   1        {
 244   2          Delay1ms();
 245   2          Delay1ms();
 246   2          uiDat = 50;//atoi(Pointe + 12);
 247   2          dutyRates = 10;
 248   2          
 249   2          logMsg(RM_RUN,"SetDutyRate:%d\r\n",dutyRates,0,0,0,0,0);
 250   2          BpsMotoCtrl(1,1,dutyRates);
 251   2          CleanBuff();
 252   2          return;
 253   2        }
 254   1        Pointe = strstr(mdUsarts.Usart1.UsartBuf,"SETCYCLE:");
 255   1        Delay1ms();
 256   1        if(NULL != Pointe)
 257   1        {
 258   2          uiDat = atoi(Pointe + 9);
 259   2          OffTime = uiDat;
 260   2          BpsMotoCtrl(1,1,uiDat);
 261   2          CleanBuff();
 262   2          return;
 263   2        }
 264   1        Pointe = strstr(mdUsarts.Usart1.UsartBuf,"STOPRUN");
 265   1        Delay1ms();
 266   1        if(NULL != Pointe)
 267   1        {
 268   2          BpsMotoCtrl(0,0,0);
 269   2          logMsg(RM_RUN,"Moto Stop Run\r\n",0,0,0,0,0,0);
 270   2          CleanBuff();
 271   2          return;
 272   2        }
 273   1        Pointe = strstr(mdUsarts.Usart1.UsartBuf,"MOTODIR:");
 274   1        Delay1ms();
 275   1        if(NULL != Pointe)
 276   1        {
 277   2          uiDat = atoi(Pointe + 8);
 278   2          logMsg(RM_RUN,"MOTODIR:%d\r\n",uiDat,0,0,0,0,0);
 279   2          if(uiDat == 0)
 280   2          {
 281   3            BpsMotoCtrl(0,1,dutyRates);
 282   3          }
 283   2          else
 284   2          {
 285   3            BpsMotoCtrl(1,1,dutyRates);
 286   3          }
 287   2          CleanBuff();
 288   2          return;
 289   2        }
 290   1      
 291   1      }
 292          /*****************************************************************************
 293           * º¯ Êý Ãû  : BpsMotoCtrl
 294           * ¸º Ôð ÈË  : xiegui
 295           * ´´½¨ÈÕÆÚ  : 2018Äê12ÔÂ6ÈÕ
C51 COMPILER V9.54   BSPPWM                                                                04/12/2019 16:33:33 PAGE 6   

 296           * º¯Êý¹¦ÄÜ  : µç»úÔË×ª¿ØÖÆ
 297           * ÊäÈë²ÎÊý  : int iDir  ·½Ïò
 298                  uiMode:Îª0Ê±É²³µ£¬Îª1Ê±ÔËÐÐ
 299           * Êä³ö²ÎÊý  : ÎÞ
 300           * ·µ »Ø Öµ  : 
 301           * µ÷ÓÃ¹ØÏµ  : 
 302           * Æä    Ëü  : 
 303          
 304          *****************************************************************************/
 305          void BpsMotoCtrl(uint8_t iDir,uint8_t uiMode,float fDutyRate)
 306          {
 307   1        /*ÅäÖÃ¸ù¾Ý·½ÏòÉèÖÃPWM²¨£¬È»ºó½øÐÐÔË×ª¿ØÖÆ*/
 308   1        mdSysParm.uiRunable = uiMode;
 309   1        
 310   1        if(uiMode)
 311   1        {
 312   2          if(iDir)
 313   2          {
 314   3            PWM1 = 0;
 315   3            PWM2 = 0;
 316   3            bspPwmCmd(DISABLE);
 317   3            //DelayMs(10);
 318   3            bspPwmInit(2,PWM_Clock_SysClkDiv,fDutyRate,CYCLE);
 319   3            /*pwm1Êä³öPWM²¨ÐÎ£¬PWM2¹Ì¶¨À­¸ß¼´¿É¿ØÖÆÕý×ª*/
 320   3            PWM1 = 1;
 321   3            //Ñ¡ÔñPWMÊ±ÖÓÐÅºÅ
 322   3            
 323   3          }
 324   2          else
 325   2          {
 326   3            PWM1 = 0;
 327   3            PWM2 = 0;
 328   3            /*pwm2Êä³öPWM²¨ÐÎ£¬PWM1¹Ì¶¨À­¸ß¼´¿É¿ØÖÆÕý×ª*/
 329   3            bspPwmCmd(DISABLE);
 330   3            //DelayMs(10);
 331   3            //Ñ¡ÔñPWMÊ±ÖÓÐÅºÅ
 332   3            bspPwmInit(1,PWM_Clock_SysClkDiv,fDutyRate,CYCLE);
 333   3            PWM2 = 1;
 334   3          }
 335   2        }
 336   1        else
 337   1        {
 338   2          PWM1 = 0;
 339   2          PWM2 = 0;
 340   2          bspPwmCmd(DISABLE);
 341   2          //DelayMs(10);
 342   2        }
 343   1      }
 344          
 345          /*****************************************************************************
 346           * º¯ Êý Ãû  : MotoSetPosition
 347           * ¸º Ôð ÈË  : xiegui
 348           * ´´½¨ÈÕÆÚ  : 2019Äê1ÔÂ13ÈÕ
 349           * º¯Êý¹¦ÄÜ  : ¿ØÖÆµç»úÔË×ªµ½Ö¸¶¨ Î»ÖÃ
 350           * ÊäÈë²ÎÊý  : float fSetPositionCm  ¾ø¶Ô»Ö
 351           * Êä³ö²ÎÊý  : ÎÞ
 352           * ·µ »Ø Öµ  : 
 353           * µ÷ÓÃ¹ØÏµ  : 
 354           * Æä    Ëü  : 
 355          
 356          *****************************************************************************/
 357          void MotoSetPosition(float fSetPositionCm)
C51 COMPILER V9.54   BSPPWM                                                                04/12/2019 16:33:33 PAGE 7   

 358          {  
 359   1        uint16_t uiDir = 0;
 360   1        uiDir = (uint16_t)mdSysParm.ImportantParms.fBigDir; //Ä¬ÈÏÎª0,ÐÞ¸ÄÕâ¸ö±äÁ¿¼´¿ÉÐÞ¸Äµç»ú·½Ïò
 361   1        if(mdSysParm.ImportantParms.fCenterCm < fSetPositionCm)  
 362   1        {   
 363   2          //¿ªÆôµç»úÕý×ª
 364   2          mdSysParm.ImportantParms.fTagetCm = fSetPositionCm;
 365   2          //µ±Ç°Î»ÖÃ´ïµ½Ä¿±êÎ»ÖÃÊ±»á×Ô¶¯Í£Ö¹µç»ú    
 366   2          mdSysParm.uiDirFromUser = 1;
 367   2          //SetSystemParmInfoToEpprom();//Ð´Èë²ÎÊýµ½flashÖÐ 
 368   2          BpsMotoCtrl(!uiDir,1,10);
 369   2        }  
 370   1        else if(mdSysParm.ImportantParms.fCenterCm > fSetPositionCm)  
 371   1        {    //¿ªÆôµç»ú·´×ª;
 372   2          mdSysParm.uiDirFromUser = 0;
 373   2          mdSysParm.ImportantParms.fTagetCm = fSetPositionCm;//µ±Ç°Î»ÖÃ´ïµ½Ä¿±êÎ»ÖÃÊ±»á×Ô¶¯Í£Ö¹µç»ú    
 374   2          //SetSystemParmInfoToEpprom();//Ð´Èë²ÎÊý     
 375   2          BpsMotoCtrl(uiDir,1,10);
 376   2        }
 377   1      }
 378          
 379          


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =   1118    ----
   CONSTANT SIZE    =    123    ----
   XDATA SIZE       =     12      29
   PDATA SIZE       =   ----    ----
   DATA SIZE        =   ----    ----
   IDATA SIZE       =   ----    ----
   BIT SIZE         =   ----    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  5 WARNING(S),  0 ERROR(S)
