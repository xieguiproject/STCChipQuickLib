C51 COMPILER V9.54   STC15XX_TIMER                                                         12/24/2019 16:31:48 PAGE 1   


C51 COMPILER V9.54, COMPILATION OF MODULE STC15XX_TIMER
OBJECT MODULE PLACED IN .\Objects\stc15xx_timer.obj
COMPILER INVOKED BY: d:\Keil_v5\C51\BIN\C51.EXE Libraries\STC15_StdPeriph_Driver\src\stc15xx_timer.c LARGE OPTIMIZE(9,SP
                    -EED) BROWSE INCDIR(.\Libraries\STC15_StdPeriph_Driver\inc;.\Libraries\STC15_StdPeriph_Driver\src;.\Libraries\CMSIS) DEFI
                    -NE(STC8) DEBUG OBJECTEXTEND PRINT(.\Listings\stc15xx_timer.lst) TABS(2) PREPRINT(.\Listings\stc15xx_timer.i) OBJECT(.\Ob
                    -jects\stc15xx_timer.obj)

line level    source

   1          #include "stc15xx_timer.h"
   2          
   3          TimerTaskInfo TimerTaskInfoQueue[MAX_TIMER_TASK];
   4          uint16_t uiTimeDelayCount = 0;
   5          TimerInitValue TimerInitValueParm[5] = {0};
   6          //记录所有的定时器初值，有的单片机不支持自动重载，需要自己记录
   7          /*****************************************************************************
   8           函 数 名  : Timer_Init
   9           功能描述  : 定时器初始化，如果使用了波特率发生器请注意自行更改
  10           输入参数  : uint8_t uiTimerNo  
  11           输出参数  : 无
  12           返 回 值  : 
  13           调用函数  : 
  14           被调函数  : 
  15           
  16           修改历史      :
  17            1.日    期   : 2019年4月12日 星期五
  18              作    者   : Gavinx
  19              修改内容   : 新生成函数
  20          
  21          *****************************************************************************/
  22          status bspTimer_Init(uint8_t uiTimerNo,TIM_InitTypeDef *InitTypeDef)
  23          {
  24   1        if(uiTimerNo > Timer4)  return ERROR; //空操作
  25   1        
  26   1        TimerInitValueParm[uiTimerNo].TIM_HValue = InitTypeDef->TIM_HValue;
  27   1        TimerInitValueParm[uiTimerNo].TIM_LValue = InitTypeDef->TIM_LValue;
  28   1        switch(uiTimerNo)
  29   1        {
  30   2          case Timer0:
  31   2          {
  32   3            //配置时钟工作再12T模式还是1T模式
  33   3            if(InitTypeDef->TIM_ClkSource == TIM_CLOCK_1T)
  34   3              AUXR |= 0X80;
  35   3            else
  36   3              AUXR &= ~0X80;
  37   3            //配置定时器TMOD,重装模式
  38   3            TMOD &= ~(0X0F << 0);   //M1 M0 00
  39   3            switch(InitTypeDef->TIM_Mode)
  40   3            {
  41   4              case TIM_16BitAutoReload:
  42   4                 TMOD |= (0x00 << 0);          //M1 M0 00
  43   4                 break;
  44   4              case TIM_16Bit:
  45   4                 TMOD |= (0X01 << 0);//M1 M0 01
  46   4                 break;
  47   4              case TIM_8BitAutoReload:
  48   4                 TMOD |= (0X02 << 0);//M1 M0 10
  49   4                 break;
  50   4              case TIM_16BitAutoReloadNoMask:
  51   4                 TMOD |= (0X03 << 0);//M1 M0 11
  52   4                 break;
C51 COMPILER V9.54   STC15XX_TIMER                                                         12/24/2019 16:31:48 PAGE 2   

  53   4            }
  54   3            
  55   3            //装载初始值
  56   3            TH0 = InitTypeDef->TIM_HValue;
  57   3            TL0 = InitTypeDef->TIM_LValue;
  58   3            
  59   3            //清除中断
  60   3            TF0 = 0;
  61   3            
  62   3            if(InitTypeDef->TIM_Interrupt == ENABLE)
  63   3            {
  64   4              ET0 = 1;
  65   4              //允许中断
  66   4            }
  67   3            else
  68   3            {
  69   4              ET0 = 0;
  70   4            }
  71   3            if(InitTypeDef->TIM_Run == ENABLE)
  72   3            {
  73   4              //是否启动定时器
  74   4              TR0 = 1;
  75   4            }
  76   3            else
  77   3            {
  78   4              TR0 = 0;
  79   4            }
  80   3            
  81   3            
  82   3          }break;
  83   2          case Timer1:
  84   2          {
  85   3            //配置时钟工作再12T模式还是1T模式
  86   3            if(InitTypeDef->TIM_ClkSource == TIM_CLOCK_1T)
  87   3              AUXR |= 0X40;
  88   3            else
  89   3              AUXR &= ~0X40;
  90   3            //配置定时器TMOD,重装模式
  91   3            TMOD &= ~(0Xf0 << 0);   //M1 M0 00
  92   3            switch(InitTypeDef->TIM_Mode)
  93   3            {
  94   4              case TIM_16BitAutoReload:
  95   4                 TMOD |= (0x00 << 4);          //M1 M0 00
  96   4                 break;
  97   4              case TIM_16Bit:
  98   4                 TMOD |= (0X01 << 4);//M1 M0 01
  99   4                 break;
 100   4              case TIM_8BitAutoReload:
 101   4                 TMOD |= (0X02 << 4);//M1 M0 10
 102   4                 break;
 103   4              case TIM_16BitAutoReloadNoMask:
 104   4                 TMOD |= (0X03 << 4);//M1 M0 11
 105   4                 break;
 106   4            }
 107   3            //装载初始值
 108   3            TH1 = InitTypeDef->TIM_HValue;
 109   3            TL1 = InitTypeDef->TIM_LValue;
 110   3            
 111   3            if(InitTypeDef->TIM_Interrupt == ENABLE)
 112   3            {
 113   4              ET1 = 1;
 114   4              //允许中断
C51 COMPILER V9.54   STC15XX_TIMER                                                         12/24/2019 16:31:48 PAGE 3   

 115   4            }
 116   3            else
 117   3            {
 118   4              ET1 = 0;
 119   4            }
 120   3            if(InitTypeDef->TIM_Run == ENABLE)
 121   3            {
 122   4              //是否启动定时器
 123   4              TR1 = 1;
 124   4            }
 125   3            else
 126   3            {
 127   4              TR1 = 0;
 128   4            }
 129   3            
 130   3            //清除中断
 131   3            TF1 = 0;
 132   3          }break;
 133   2          case Timer2:
 134   2          {
 135   3            //配置时钟工作再12T模式还是1T模式
 136   3            if(InitTypeDef->TIM_ClkSource == TIM_CLOCK_1T)
 137   3              AUXR |= 0X04;
 138   3            else
 139   3              AUXR &= ~0X04;
 140   3            //定时器2默认自动重装
 141   3            //装载初始值
 142   3            T2H = InitTypeDef->TIM_HValue;
 143   3            T2L = InitTypeDef->TIM_LValue;
 144   3            
 145   3            if(InitTypeDef->TIM_Interrupt == ENABLE)
 146   3            {
 147   4              IE2 |= (0X01 << 2);
 148   4              //允许中断
 149   4            }
 150   3            else
 151   3            {
 152   4              IE2 &= ~(0X01 << 2);
 153   4            }
 154   3            //是否启动定时器
 155   3            if(InitTypeDef->TIM_Run == ENABLE)
 156   3            {
 157   4              
 158   4              AUXR |= (0X01 << 4);
 159   4            }
 160   3            else
 161   3            {
 162   4              AUXR &= ~(0X01 << 4);
 163   4            }
 164   3          };break;
 165   2      #ifndef STC15W201S  
 166   2          case Timer3:break;
 167   2          case Timer4:break;
 168   2      #endif
 169   2        }
 170   1        return OK;
 171   1      }
 172          void bspTimer_Cmd(uint8_t  uiTimerNo,FunctionalState State)
 173          {
 174   1        switch(uiTimerNo)
 175   1        {
 176   2          case Timer0:
C51 COMPILER V9.54   STC15XX_TIMER                                                         12/24/2019 16:31:48 PAGE 4   

 177   2          {
 178   3            if(State == ENABLE)
 179   3            {
 180   4              TR0 = 1;
 181   4            }
 182   3            else
 183   3            {
 184   4              TR0 = 0;
 185   4            }
 186   3          }break;
 187   2          case Timer1:
 188   2            break;
 189   2          case Timer2:
 190   2          {
 191   3            if(State == ENABLE)
 192   3            {
 193   4              AUXR |= (0X01 << 4);
 194   4            }
 195   3            else
 196   3            {
 197   4              AUXR &= ~(0X01 << 4);
 198   4            }
 199   3          };break;
 200   2        }
 201   1      }
 202          void bspTimerTaskInit()
 203          {
 204   1        uint8_t ucLoop = 0;
 205   1        for(ucLoop = 0;ucLoop < MAX_TIMER_TASK;ucLoop++)
 206   1        {
 207   2            TimerTaskInfoQueue[ucLoop].ucUseState = false;
 208   2            TimerTaskInfoQueue[ucLoop].uiCount = 0;
 209   2            TimerTaskInfoQueue[ucLoop].uiIntTime = 0;
 210   2            TimerTaskInfoQueue[ucLoop].Hook = NULL;
 211   2        }
 212   1      }
 213          int8_t bspTimerTaskGetItem()
 214          {
 215   1        uint8_t ucLoop = 0;
 216   1        for(ucLoop = 0;ucLoop < MAX_TIMER_TASK;ucLoop++)
 217   1        {
 218   2          if(TimerTaskInfoQueue[ucLoop].ucUseState == false) 
 219   2          {
 220   3            TimerTaskInfoQueue[ucLoop].ucUseState = true;
 221   3            TimerTaskInfoQueue[ucLoop].uiCount = 0;
 222   3            TimerTaskInfoQueue[ucLoop].uiIntTime = 0;
 223   3            TimerTaskInfoQueue[ucLoop].Hook = NULL;
 224   3            return ucLoop;
 225   3          }
 226   2        }
 227   1        return ERROR;
 228   1      }
 229          void bspTimerTaskFreeItem(int8_t Item)
 230          {
 231   1        if(Item < MAX_TIMER_TASK)
 232   1        {
 233   2          TimerTaskInfoQueue[Item].ucUseState = false;
 234   2        }
 235   1      }
 236          sbit led1 = P2^3;
 237          void LedControlTasksss()
 238          {
C51 COMPILER V9.54   STC15XX_TIMER                                                         12/24/2019 16:31:48 PAGE 5   

 239   1        static unsigned int  uiLedFlag = 0;
 240   1        
 241   1        if(uiLedFlag == 0)
 242   1        {
 243   2          led1 = 1;
 244   2          uiLedFlag = 1;
 245   2        }
 246   1        else
 247   1        { 
 248   2          led1 = 0;
 249   2          uiLedFlag = 0;
 250   2        }
 251   1      }
 252          void bspTimer2_IRQHandler(void) interrupt 12
 253          {
 254   1        T2H = TimerInitValueParm[Timer2].TIM_HValue;
 255   1        T2L = TimerInitValueParm[Timer2].TIM_LValue;
 256   1        
 257   1      }
 258          //定时器0中断函数
 259          void bspTimer0_IRQHandler(void) interrupt 1
 260          {
 261   1        uint16_t ucLoop = 0;
 262   1        
 263   1        TH0 = TimerInitValueParm[Timer0].TIM_HValue;
 264   1        
 265   1        TL0 = TimerInitValueParm[Timer0].TIM_LValue;
 266   1        
 267   1        for(ucLoop = 0;ucLoop < MAX_TIMER_TASK;ucLoop++)
 268   1        { 
 269   2          if(TimerTaskInfoQueue[ucLoop].ucUseState == true && 
 270   2            TimerTaskInfoQueue[ucLoop].Hook != NULL)
 271   2          {
 272   3            if(TimerTaskInfoQueue[ucLoop].uiRunTime == 0xffff ||
 273   3              TimerTaskInfoQueue[ucLoop].uiRunTime > 0)
 274   3            {
 275   4              if(TimerTaskInfoQueue[ucLoop].uiCount >= TimerTaskInfoQueue[ucLoop].uiIntTime)
 276   4              {
 277   5                //时间到
 278   5                TimerTaskInfoQueue[ucLoop].Hook(NULL);
 279   5                TimerTaskInfoQueue[ucLoop].uiCount = 0;
 280   5                TimerTaskInfoQueue[ucLoop].uiRunTime--;
 281   5              }
 282   4              else
 283   4              {
 284   5                TimerTaskInfoQueue[ucLoop].uiCount++;//1ms
 285   5              }
 286   4            }
 287   3            else
 288   3            {
 289   4              TimerTaskInfoQueue[ucLoop].ucUseState = false;
 290   4              TimerTaskInfoQueue[ucLoop].Hook = NULL;
 291   4              /*任务执行次数到，则删除任务*/
 292   4            }
 293   3          }
 294   2        }
 295   1      }
 296          
 297          void bspTimerRegisterHook(TimerTaskHook hook,uint16_t uiIntTime)
 298          {
 299   1        uint8_t Item = 0;
 300   1        
C51 COMPILER V9.54   STC15XX_TIMER                                                         12/24/2019 16:31:48 PAGE 6   

 301   1        Item = bspTimerTaskGetItem();//获取一个对象
 302   1        if(Item == ERROR)
 303   1        {
 304   2          return;
 305   2        }
 306   1        TimerTaskInfoQueue[Item].Hook = hook;
 307   1        TimerTaskInfoQueue[Item].uiIntTime = uiIntTime;//1秒一执行
 308   1        TimerTaskInfoQueue[Item].uiCount = 0;
 309   1        TimerTaskInfoQueue[Item].uiRunTime = 0xffff;
 310   1      }
 311          
 312          void * bspTimeDelayTask(void *arg)
 313          {
 314   1        if(uiTimeDelayCount > 0)
 315   1        {
 316   2          uiTimeDelayCount--;
 317   2        }
 318   1      }
*** WARNING C173 IN LINE 318 OF Libraries\STC15_StdPeriph_Driver\src\stc15xx_timer.c: missing return-expression
*** WARNING C280 IN LINE 312 OF Libraries\STC15_StdPeriph_Driver\src\stc15xx_timer.c: 'arg': unreferenced local variable
 319          void bspTimeDelayInit()
 320          {
 321   1        uint8_t Item = 0;
 322   1        
 323   1        Item = bspTimerTaskGetItem();//获取一个对象
 324   1        if(Item == ERROR)
 325   1        {
 326   2          return;
 327   2        }
 328   1        TimerTaskInfoQueue[Item].Hook = bspTimeDelayTask;
 329   1        TimerTaskInfoQueue[Item].uiIntTime = 1;//1ms秒一执行
 330   1        TimerTaskInfoQueue[Item].uiCount = 0;
 331   1        TimerTaskInfoQueue[Item].uiRunTime = 0xffff;
 332   1      }
 333          void bspTimeDelay(uint16_t uiDelayMs)
 334          {
 335   1        uiTimeDelayCount = uiDelayMs;
 336   1        while(uiTimeDelayCount != 0);
 337   1      }
*** WARNING C290 IN LINE 318 OF Libraries\STC15_StdPeriph_Driver\src\stc15xx_timer.c: missing return value


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =   1088    ----
   CONSTANT SIZE    =   ----    ----
   XDATA SIZE       =     69       7
   PDATA SIZE       =   ----    ----
   DATA SIZE        =   ----    ----
   IDATA SIZE       =   ----    ----
   BIT SIZE         =   ----    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  3 WARNING(S),  0 ERROR(S)
